[gd_scene load_steps=15 format=3 uid="uid://csoawyatenu6q"]

[ext_resource type="Environment" uid="uid://cr1uyuio58xv" path="res://scenery/defaultEnvironment.tres" id="1"]
[ext_resource type="Script" path="res://scripts/settings.gd" id="2"]
[ext_resource type="Script" path="res://scripts/Ping360Viewport.gd" id="3"]
[ext_resource type="Script" path="res://scripts/InterpolatedCamera.gd" id="4"]
[ext_resource type="Script" path="res://scripts/targetPos.gd" id="5"]
[ext_resource type="Shader" path="res://vehicles/components/ping360.gdshader" id="6"]
[ext_resource type="Script" path="res://levels/baselevel.gd" id="7"]
[ext_resource type="PackedScene" uid="uid://bugvjfyqpmrl8" path="res://scenery/scene.tscn" id="8"]
[ext_resource type="PackedScene" path="res://vehicles/bluerovheavy/BlueRovHeavy.tscn" id="9"]

[sub_resource type="GDScript" id="1"]
script/source = "# Licensed under the MIT License.
# Copyright (c) 2018-2020 Jaccomo Lorenz (Maujoe)

extends Node3D

# User settings:
# General settings
@export var enabled = true: set = set_enabled

# See https://docs.godotengine.org/en/latest/classes/class_input.html?highlight=Input#enumerations
@export var mouse_mode = Input.MOUSE_MODE_CAPTURED # (int, \"Visible\", \"Hidden\", \"Captured, Confined\")

enum Freelook_Modes {MOUSE, INPUT_ACTION, MOUSE_AND_INPUT_ACTION}

# Freelook settings
@export var freelook = true
@export var freelook_mode : Freelook_Modes = 2
@export_range(0.0, 1.0) var sensitivity : float = 0.5
@export_range(0.0, 0.999, 0.001) var smoothness :float = 0.5: set = set_smoothness
@export_range(0, 360) var yaw_limit = 360
@export_range(0, 360) var pitch_limit = 360

# Pivot Settings
@export var privot_path: NodePath: set = set_privot
@export var distance = 5.0: set = set_distance
@export var rotate_privot = false
@export var collisions = true: set = set_collisions

# Movement settings
@export var movement = true
@export_range(0.0, 5.0) var acceleration : float = 5.0
@export_range(0.0, 0.0, 1.0) var deceleration : float = 0.1
@export var max_speed = Vector3(15.0, 15.0, 15.0)
@export var local = true

# Input Actions
@export var rotate_left_action = \"\"
@export var rotate_right_action = \"\"
@export var rotate_up_action = \"\"
@export var rotate_down_action = \"\"
@export var forward_action = \"player_up\"
@export var backward_action = \"player_down\"
@export var left_action = \"player_left\"
@export var right_action = \"player_right\"
@export var up_action = \"camera_upwards\"
@export var down_action = \"camera_downwards\"
@export var trigger_action = \"camera_trigger\"

# Gui settings
@export var use_gui = true
@export var gui_action = \"ui_cancel\"

# Intern variables.
var _mouse_offset = Vector2()
var _rotation_offset = Vector2()
var _yaw = 0.0
var _pitch = 0.0
var _total_yaw = 0.0
var _total_pitch = 0.0
var _privot : Node = null

var _direction = Vector3(0.0, 0.0, 0.0)
var _speed = Vector3(0.0, 0.0, 0.0)
var _gui

var _triggered=false

const ROTATION_MULTIPLIER = 500

func _ready():
	_check_actions([
		forward_action,
		backward_action,
		left_action,
		right_action,
		gui_action,
		up_action,
		down_action,
		rotate_left_action,
		rotate_right_action,
		rotate_up_action,
		rotate_down_action
	])

	if not privot_path.is_empty():
		_privot = get_node(privot_path)
	else:
		_privot = null

	set_enabled(enabled)


func _input(event):
		if len(trigger_action)!=0:
			if event.is_action_pressed(trigger_action):
				_triggered=true
			elif event.is_action_released(trigger_action):
				_triggered=false
		else:
			_triggered=true
		if freelook and _triggered:
			if event is InputEventMouseMotion:
				_mouse_offset = event.relative
				
			_rotation_offset.x = Input.get_action_strength(rotate_right_action) - Input.get_action_strength(rotate_left_action)
			_rotation_offset.y = Input.get_action_strength(rotate_down_action) - Input.get_action_strength(rotate_up_action)
	
		if movement and _triggered:
			_direction.x = Input.get_action_strength(right_action) - Input.get_action_strength(left_action)
			_direction.y = Input.get_action_strength(up_action) - Input.get_action_strength(down_action)
			_direction.z = Input.get_action_strength(backward_action) - Input.get_action_strength(forward_action)

func _process(delta):
	if _triggered:
		_update_views(delta)

func _update_views(delta):
	if _privot:
		_update_distance()
	if freelook:
		_update_rotation(delta)
	if movement:
		_update_movement(delta)

func _physics_process(delta):
	if _triggered:
		_update_views_physics(delta)

func _update_views_physics(delta):
	# Called when collision are enabled
	_update_distance()
	if freelook:
		_update_rotation(delta)

	var space_state = get_world_3d().get_direct_space_state()
	var params = PhysicsRayQueryParameters3D.new()
	params.from = _privot.get_position()
	params.to = get_position()
	var obstacle = space_state.intersect_ray(params)
	if not obstacle.is_empty():
		set_position(obstacle.position)

func _update_movement(delta):
	var offset = max_speed * acceleration * _direction

	_speed.x = clamp(_speed.x + offset.x, -max_speed.x, max_speed.x)
	_speed.y = clamp(_speed.y + offset.y, -max_speed.y, max_speed.y)
	_speed.z = clamp(_speed.z + offset.z, -max_speed.z, max_speed.z)

	# Apply deceleration if no input
	if _direction.x == 0:
		_speed.x *= (1.0 - deceleration)
	if _direction.y == 0:
		_speed.y *= (1.0 - deceleration)
	if _direction.z == 0:
		_speed.z *= (1.0 - deceleration)

	if local:
		translate(_speed * delta)
	else:
		global_translate(_speed * delta)

func _update_rotation(delta):
	var offset = Vector2();
	
	if not freelook_mode == Freelook_Modes.INPUT_ACTION:
		offset += _mouse_offset * sensitivity
	if not freelook_mode == Freelook_Modes.MOUSE: 
		offset += _rotation_offset * sensitivity * ROTATION_MULTIPLIER * delta
	
	_mouse_offset = Vector2()

	_yaw = _yaw * smoothness + offset.x * (1.0 - smoothness)
	_pitch = _pitch * smoothness + offset.y * (1.0 - smoothness)

	if yaw_limit < 360:
		_yaw = clamp(_yaw, -yaw_limit - _total_yaw, yaw_limit - _total_yaw)
	if pitch_limit < 360:
		_pitch = clamp(_pitch, -pitch_limit - _total_pitch, pitch_limit - _total_pitch)

	_total_yaw += _yaw
	_total_pitch += _pitch

	if _privot:
		var target = _privot.get_position()
		var dist = get_position().distance_to(target)

		set_position(target)
		rotate_y(deg_to_rad(-_yaw))
		rotate_object_local(Vector3(1,0,0), deg_to_rad(-_pitch))
		translate(Vector3(0.0, 0.0, dist))

		if rotate_privot:
			_privot.rotate_y(deg_to_rad(-_yaw))
	else:
		rotate_y(deg_to_rad(-_yaw))
		rotate_object_local(Vector3(1,0,0), deg_to_rad(-_pitch))

func _update_distance():
	var t = _privot.get_position()
	t.z -= distance
	set_position(t)

func _update_process_func():
	# Use physics process if collision are enabled
	if collisions and _privot:
		set_physics_process(true)
		set_process(false)
	else:
		set_physics_process(false)
		set_process(true)

func _check_actions(actions=[]):
	if OS.is_debug_build():
		for action in actions:
			if not InputMap.has_action(action):
				print('WARNING: No action \"' + action + '\"')

func set_privot(value):
	_privot = value
	_update_process_func()
	if len(trigger_action)!=0:
		_update_views(0)

func set_collisions(value):
	collisions = value
	_update_process_func()

func set_enabled(value):
	enabled = value
	if enabled:
		Input.set_mouse_mode(mouse_mode)
		set_process_input(true)
		_update_process_func()
	else:
		set_process(false)
		set_process_input(false)
		set_physics_process(false)

func set_smoothness(value):
	smoothness = clamp(value, 0.001, 0.999)

func set_distance(value):
	distance = max(0, value)
"

[sub_resource type="GDScript" id="2"]
script/source = "extends Node3D

const SECTION = preload(\"res://rope/section.tscn\")
const LINK = preload(\"res://rope/joint.tscn\")

var offset = Vector3(0,0,-0.434)
@export var loops : int = 1
var vehicle

func _ready():
	var parent = get_parent().find_child(\"BlueRov\", true, false)
	for i in range (loops):
		var child = addSection(parent, i)
		addLink(parent, child, i)
		parent = child
		
func addSection(_parent, i):
	var section = SECTION.instantiate()
	section.transform.origin = -offset +  Vector3(0,0,-0.145) * i
	for child in section.get_children():
		child.transform.origin = Vector3(0,0,0)
	add_child(section)
	return section
	
func addLink(parent, child, i):

	var pin = LINK.instantiate()
	pin.global_transform = Transform3D(
		Basis(
			Vector3(1, 0, 0),
			Vector3(0, 1, 0),
			Vector3(0, 0, 1)
			),
			-Vector3(0,0,0.145/2)
		)
	pin.set_node_a(parent.get_path())
	pin.set_node_b(child.get_path())
	parent.add_child(pin)
	pin.set_solver_priority(i)

"

[sub_resource type="GDScript" id="3"]
script/source = "extends PanelContainer


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass

func _input(event):
	if event.is_action_pressed(\"help\"):
		if not self.is_visible():
			self.show()
		else:
			self.hide()
"

[sub_resource type="GDScript" id="4"]
script/source = "extends Camera3D


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	self.look_at(Globals.active_vehicle.transform.origin, Vector3(0,1,0))

"

[sub_resource type="ShaderMaterial" id="5"]
shader = ExtResource("6")

[node name="Node2D" type="Control"]
process_mode = 3
show_behind_parent = true
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("7")

[node name="ViewportCamera" type="SubViewportContainer" parent="."]
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
stretch = true

[node name="SubViewport" type="SubViewport" parent="ViewportCamera"]
handle_input_locally = false
size = Vector2i(1152, 648)
render_target_update_mode = 4

[node name="playerCamera" type="Node3D" parent="ViewportCamera/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 14.7902, 0)
script = SubResource("1")
mouse_mode = 0

[node name="Camera3D" type="Camera3D" parent="ViewportCamera/SubViewport/playerCamera" groups=["cameras"]]
current = true
far = 275.0

[node name="theter" type="Node3D" parent="ViewportCamera/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.769269)
script = SubResource("2")
loops = 100

[node name="cameraPosition" type="Node3D" parent="ViewportCamera/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4.21178, 10.2615, 4.21928)
script = ExtResource("5")

[node name="BlueRovHeavy" parent="ViewportCamera/SubViewport" instance=ExtResource("9")]

[node name="SettingsPanel" type="PanelContainer" parent="ViewportCamera"]
visible = false
layout_mode = 2
script = ExtResource("2")

[node name="VBoxContainer" type="VBoxContainer" parent="ViewportCamera/SettingsPanel"]
layout_mode = 2

[node name="godrayToggle" type="CheckButton" parent="ViewportCamera/SettingsPanel/VBoxContainer"]
layout_mode = 2
text = "GodRays"

[node name="dirtparticlesToggle" type="CheckButton" parent="ViewportCamera/SettingsPanel/VBoxContainer"]
layout_mode = 2
text = "Particles"

[node name="fancyWaterToggle" type="CheckButton" parent="ViewportCamera/SettingsPanel/VBoxContainer"]
layout_mode = 2
text = "Fancy Water"

[node name="Ping360Toggle" type="CheckButton" parent="ViewportCamera/SettingsPanel/VBoxContainer"]
layout_mode = 2
text = "Ping360"

[node name="physicsRate" type="Label" parent="ViewportCamera/SettingsPanel/VBoxContainer"]
layout_mode = 2
text = "Physics (hz):"

[node name="physicsRateSlider" type="HSlider" parent="ViewportCamera/SettingsPanel/VBoxContainer"]
layout_mode = 2
min_value = 60.0
max_value = 500.0
value = 60.0

[node name="HelpPanel" type="PanelContainer" parent="ViewportCamera"]
modulate = Color(1, 1, 1, 0.619608)
layout_mode = 2
script = SubResource("3")

[node name="VBoxContainer" type="VBoxContainer" parent="ViewportCamera/HelpPanel"]
layout_mode = 2

[node name="help" type="Label" parent="ViewportCamera/HelpPanel/VBoxContainer"]
layout_mode = 2
text = "H - Toggle Help (this)
ESC - Graphics settings

C - switch camera//vehicle
R - reset position

Free camera:
Hold left button + a/w/s/d + q/e

ROV:
1/2: Increase/decrease lights
3/4: Close/open gripper
5/6: Camera3D tilt down/up
Space: Rise
Shift: Dive
A/D: Strafe
Up/Down: forward/backwards
left/right: Yaw left/right
"

[node name="ViewportGlobal" type="SubViewportContainer" parent="."]
process_mode = 3
layout_mode = 0
anchor_left = 1.0
anchor_right = 1.0
offset_left = -362.0
offset_bottom = 248.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 3
stretch = true

[node name="SubViewport" type="SubViewport" parent="ViewportGlobal"]
handle_input_locally = false
size = Vector2i(362, 248)
render_target_update_mode = 4

[node name="Camera3D" type="Camera3D" parent="ViewportGlobal/SubViewport" groups=["cameras"]]
transform = Transform3D(-0.995028, 0, 0.0995974, 0, 1, 0, -0.0995974, 0, -0.995028, -1.54154, 7.13712, -2.96935)
cull_mask = 1048573
environment = ExtResource("1")
current = true
far = 497.4
script = ExtResource("4")

[node name="Scene" parent="ViewportGlobal/SubViewport" instance=ExtResource("8")]
transform = Transform3D(-0.361771, 0, -0.932267, 0, 1, 0, 0.932267, 0, -0.361771, 0.491683, 0.56816, 17.7391)

[node name="OmniLight3D" type="OmniLight3D" parent="ViewportGlobal/SubViewport/Scene"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 8.82227, -0.900686, 47.1526)
light_energy = 0.8
light_indirect_energy = 0.7
omni_range = 5.9

[node name="ViewportGlobal2" type="SubViewportContainer" parent="."]
process_mode = 3
visible = false
layout_mode = 0
anchor_left = 1.0
anchor_right = 1.0
offset_left = -1019.76
offset_top = 1.12245
offset_right = -657.763
offset_bottom = 249.122
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 3
stretch = true

[node name="SubViewport" type="SubViewport" parent="ViewportGlobal2"]
handle_input_locally = false
size = Vector2i(361, 247)
render_target_update_mode = 0

[node name="Camera3D" type="Camera3D" parent="ViewportGlobal2/SubViewport"]
transform = Transform3D(-0.998367, -1.8596e-09, 0.0571282, 0.0271268, 0.880072, 0.474066, -0.0502769, 0.474841, -0.878634, 0, 14.74, 0)
current = true
script = SubResource("4")

[node name="Ping360Viewport" type="SubViewportContainer" parent="."]
process_mode = 3
material = SubResource("5")
layout_mode = 0
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -296.0
offset_top = -265.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 3
stretch = true
script = ExtResource("3")

[node name="SubViewport" type="SubViewport" parent="Ping360Viewport"]
handle_input_locally = false
size = Vector2i(296, 265)
render_target_update_mode = 4

[node name="Camera3D" type="Camera3D" parent="Ping360Viewport/SubViewport" groups=["cameras"]]
transform = Transform3D(-0.995028, 0, 0.0995974, 0, 1, 0, -0.0995974, 0, -0.995028, -1.54154, 7.13712, -2.96935)
cull_mask = 3
environment = ExtResource("1")
current = true
script = ExtResource("4")

[node name="ReferenceRect" type="ReferenceRect" parent="."]
visible = false
custom_minimum_size = Vector2(1024, 600)
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 1.36035
offset_top = 1.36038
offset_right = 1.36035
offset_bottom = 1.36035

[connection signal="toggled" from="ViewportCamera/SettingsPanel/VBoxContainer/godrayToggle" to="ViewportGlobal/SubViewport/Scene" method="_on_godrayToggle_toggled"]
[connection signal="toggled" from="ViewportCamera/SettingsPanel/VBoxContainer/dirtparticlesToggle" to="ViewportGlobal/SubViewport/Scene" method="_on_dirtparticlesToggle_toggled"]
[connection signal="toggled" from="ViewportCamera/SettingsPanel/VBoxContainer/fancyWaterToggle" to="ViewportGlobal/SubViewport/Scene" method="_on_fancyWaterToggle_toggled"]
[connection signal="toggled" from="ViewportCamera/SettingsPanel/VBoxContainer/Ping360Toggle" to="Ping360Viewport" method="_on_Ping360Toggle_toggled"]
[connection signal="ready" from="ViewportCamera/SettingsPanel/VBoxContainer/physicsRateSlider" to="ViewportCamera/SettingsPanel" method="_on_HSlider_ready"]
[connection signal="value_changed" from="ViewportCamera/SettingsPanel/VBoxContainer/physicsRateSlider" to="ViewportCamera/SettingsPanel" method="_on_HSlider_value_changed"]
